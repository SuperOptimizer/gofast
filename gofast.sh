#!/usr/bin/env bash
set -euo pipefail

WORK_DIR="/home/forrest/llvm-musl-toolchain"
SRC_DIR="/home/forrest"
LLVM_PROJECT_SRC="/home/forrest/llvm-project"
LLVM_SRC="${LLVM_PROJECT_SRC}/llvm"

BUILD_DIR="${WORK_DIR}/build"
SYSROOT_DIR="${WORK_DIR}/sysroot"       # Temporary sysroot for building components
FINAL_DIR="${WORK_DIR}/x86_64-linux-llvm" # Final toolchain output directory

TARGET_TRIPLE="x86_64-linux-llvm"

JOBS=$(nproc)

rm -rf "${BUILD_DIR}" "${SYSROOT_DIR}" "${FINAL_DIR}"
mkdir -p "${SRC_DIR}" "${BUILD_DIR}"
mkdir -p "${SYSROOT_DIR}/usr/include" "${SYSROOT_DIR}/usr/lib" "${SYSROOT_DIR}/lib"
mkdir -p "${FINAL_DIR}/bin" "${FINAL_DIR}/lib" "${FINAL_DIR}/include" "${FINAL_DIR}/sysroot"

cd "${SRC_DIR}"
[ ! -d "llvm-project" ] && git clone https://github.com/llvm/llvm-project.git --depth 1

# Step 1: Build LLVM TableGen tools first (needed for other builds)
echo "Building LLVM TableGen tools..."
TABLEGEN_DIR="${BUILD_DIR}/tablegen"
mkdir -p "${TABLEGEN_DIR}"
cd "${TABLEGEN_DIR}"

FLAGS="    -fuse-ld=lld -target x86_64-linux-musl -stdlib=libc++ -unwind=libunwind -rtlib=compiler-rt "



cmake -G Ninja "${LLVM_SRC}" \
  -DCMAKE_C_COMPILER=clang \
  -DCMAKE_CXX_COMPILER=clang++ \
  -DLLVM_ENABLE_MODULES=ON\
  -DBUILD_SHARED_LIBS=OFF\
  -DCMAKE_C_FLAGS="${FLAGS}" \
  -DCMAKE_CXX_FLAGS=" ${FLAGS} " \
  -DCMAKE_EXE_LINKER_FLAGS="${FLAGS}  " \
    -DCMAKE_SHARED_LINKER_FLAGS="  " \
    -DCMAKE_MODULE_LINKER_FLAGS=" " \
    -DCMAKE_STATIC_LINKER_FLAGS="  " \
  -DCMAKE_BUILD_TYPE=Release \
  -DLLVM_TARGETS_TO_BUILD="X86" \
-DLLVM_ENABLE_BACKTRACES=OFF \
  -DLLVM_ENABLE_PRETTY_STACK_TRACE=OFF \
  -DLLVM_ENABLE_CRASH_DUMPS=OFF \
  -DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
  -DLLVM_ENABLE_PROJECTS="" \
  -DCLANG_ENABLE_SHARED=OFF\
  -DLLVM_ENABLE_MODULES=ON \
  -DCLANG_ENABLE_MODULES=ON \
  -DLLVM_ENABLE_LIBCXX=ON \
  -DLLVM_ENABLE_MODULES=ON \
  -DLLVM_ENABLE_PIC=ON \
  -DLLVM_INCLUDE_TESTS=OFF \
  -DLLVM_INCLUDE_EXAMPLES=OFF \
  -DLLVM_ENABLE_PIC=ON \
  -DCMAKE_POSITION_INDEPENDENT_CODE=OFF \
  -DLIBCXX_INSTALL_MODULES=OFF \
-DLLVM_ENABLE_ZLIB=OFF \
-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
-DLLVM_ENABLE_ZSTD=OFF \
-DLLVM_ENABLE_THREADS=ON \
-DLLVM_ENABLE_FFI=OFF \
-DLLVM_ENABLE_CRASH_DUMPS=OFF \
-DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
-DLLVM_ENABLE_UNWIND_TABLES=OFF \
-DLLVM_ENABLE_BACKTRACES=OFF \
-DBUILD_SHARED_LIBS=OFF \
-DLLVM_USE_FOLDERS=OFF \
-DLLVM_INSTALL_MODULEMAPS=OFF \
-DLLVM_INSTALL_UTILS=OFF \
-DLLVM_USE_SYMLINKS=OFF \
-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
-DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
-DLLVM_DEPENDENCY_DEBUGGING=OFF \
-DLLVM_CCACHE_BUILD=OFF \
-DLIBC_GPU_BUILD=OFF \
-DLLVM_ENABLE_LIBXML2=OFF \
-DLLVM_ENABLE_LIBEDIT=OFF \
-DLLVM_ENABLE_LIBPFM=OFF \
-DLLVM_ENABLE_CURL=OFF \
-DLLVM_ENABLE_PIC=ON \
-DLLVM_ENABLE_MODULES=ON \
-DLLVM_ENABLE_MODULE_DEBUGGING=OFF \
-DLLVM_ENABLE_LIBCXX=ON \
-DLLVM_ENABLE_LLVM_LIBC=ON \
-DLLVM_STATIC_LINK_CXX_STDLIB=ON \
-DLLVM_ENABLE_LLD=ON \
-DLLVM_ENABLE_ASSERTIONS=OFF \
-DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \
-DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF \
-DLLVM_USE_PERF=OFF \
-DLLVM_USE_OPROFILE=OFF \
-DLLVM_USE_SANITIZER=OFF \
-DLLVM_USE_SPLIT_DWARF=ON \
-DLLVM_INCLUDE_TOOLS=ON \
-DLLVM_INCLUDE_UTILS=ON \
-DLLVM_INCLUDE_RUNTIMES=ON \
-DLLVM_BUILD_RUNTIME=ON \
-DLLVM_BUILD_EXAMPLES=OFF \
-DLLVM_BUILD_TESTS=OFF \
-DLLVM_INSTALL_GTEST=OFF \
-DLLVM_BUILD_BENCHMARKS=OFF \
-DLLVM_INCLUDE_BENCHMARKS=OFF \
-DLLVM_INCLUDE_DOCS=OFF\
-DLLVM_ENABLE_OCAMLDOC=OFF \
-DLLVM_ENABLE_BINDINGS=OFF \
-DLLVM_ENABLE_TELEMETRY=OFF \
-DLLVM_BUILD_STATIC=ON \
  -DLLVM_BUILD_TOOLS=ON

ninja llvm-tblgen

cmake -G Ninja "${LLVM_SRC}" \
    -DCMAKE_C_COMPILER=clang \
-DLLVM_ENABLE_MODULES=ON\
    -DCMAKE_CXX_COMPILER=clang++ \
  -DCMAKE_C_FLAGS="${FLAGS}" \
  -DCMAKE_CXX_FLAGS=" ${FLAGS} " \
  -DCMAKE_EXE_LINKER_FLAGS="${FLAGS}  " \
    -DCMAKE_SHARED_LINKER_FLAGS="  " \
    -DCMAKE_MODULE_LINKER_FLAGS=" " \
    -DCMAKE_STATIC_LINKER_FLAGS="  " \
-DCLANG_ENABLE_SHARED=OFF\
    -DCMAKE_BUILD_TYPE=Release \
    -DLLVM_TARGETS_TO_BUILD="X86" \
        -DLLVM_ENABLE_BACKTRACES=OFF \
    -DLLVM_ENABLE_PRETTY_STACK_TRACE=OFF \
    -DCLANG_ENABLE_MODULES=ON \
    -DLLVM_ENABLE_CRASH_DUMPS=OFF \
  -DCLANG_ENABLE_MODULES=ON \
  -DLLVM_ENABLE_PIC=ON \
  -DCMAKE_POSITION_INDEPENDENT_CODE=OFF \
    -DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
    -DLLVM_ENABLE_PROJECTS="clang" \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DBUILD_SHARED_LIBS=OFF\
    -DLLVM_ENABLE_MODULES=ON \
-DLLVM_ENABLE_ZLIB=OFF \
-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
-DLLVM_ENABLE_ZSTD=OFF \
-DLLVM_ENABLE_THREADS=ON \
-DLLVM_ENABLE_FFI=OFF \
-DLLVM_ENABLE_CRASH_DUMPS=OFF \
-DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
-DLLVM_ENABLE_UNWIND_TABLES=OFF \
-DLLVM_ENABLE_BACKTRACES=OFF \
-DBUILD_SHARED_LIBS=OFF \
-DLLVM_USE_FOLDERS=OFF \
-DLLVM_INSTALL_MODULEMAPS=OFF \
-DLLVM_INSTALL_UTILS=OFF \
-DLLVM_USE_SYMLINKS=OFF \
-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
-DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
-DLLVM_DEPENDENCY_DEBUGGING=OFF \
-DLLVM_CCACHE_BUILD=OFF \
-DLIBC_GPU_BUILD=OFF \
-DLLVM_ENABLE_LIBXML2=OFF \
-DLLVM_ENABLE_LIBEDIT=OFF \
-DLLVM_ENABLE_LIBPFM=OFF \
-DLLVM_ENABLE_CURL=OFF \
-DLLVM_ENABLE_PIC=ON \
-DLLVM_ENABLE_MODULES=ON \
-DLLVM_ENABLE_MODULE_DEBUGGING=OFF \
-DLLVM_ENABLE_LIBCXX=ON \
-DLLVM_ENABLE_LLVM_LIBC=ON \
-DLLVM_STATIC_LINK_CXX_STDLIB=ON \
-DLLVM_ENABLE_LLD=ON \
-DLLVM_ENABLE_ASSERTIONS=OFF \
-DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \
-DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF \
-DLLVM_USE_PERF=OFF \
-DLLVM_USE_OPROFILE=OFF \
-DLLVM_USE_SANITIZER=OFF \
-DLLVM_USE_SPLIT_DWARF=ON \
-DLLVM_INCLUDE_TOOLS=ON \
-DLLVM_INCLUDE_UTILS=ON \
-DLLVM_INCLUDE_RUNTIMES=ON \
-DLLVM_BUILD_RUNTIME=ON \
-DLLVM_BUILD_EXAMPLES=OFF \
-DLLVM_BUILD_TESTS=OFF \
-DLLVM_INSTALL_GTEST=OFF \
-DLLVM_BUILD_BENCHMARKS=OFF \
-DLLVM_INCLUDE_BENCHMARKS=OFF \
-DLLVM_INCLUDE_DOCS=OFF\
-DLLVM_ENABLE_OCAMLDOC=OFF \
-DLLVM_ENABLE_BINDINGS=OFF \
-DLLVM_ENABLE_TELEMETRY=OFF \
-DLLVM_BUILD_STATIC=ON \
    -DLLVM_TABLEGEN_EXE="${TABLEGEN_DIR}/bin/llvm-tblgen"

ninja clang-tblgen

mkdir -p "${BUILD_DIR}/bin"
cp "${TABLEGEN_DIR}/bin/llvm-tblgen" "${BUILD_DIR}/bin/"
cp "${TABLEGEN_DIR}/bin/clang-tblgen" "${BUILD_DIR}/bin/"

# Step 2: Build initial Clang, LLD, and LLVM's libc (to populate sysroot)
echo "Building initial Clang, LLD, and LLVM's libc..."
INITIAL_DIR="${BUILD_DIR}/initial"
mkdir -p "${INITIAL_DIR}"
cd "${INITIAL_DIR}"

cmake -G Ninja "${LLVM_PROJECT_SRC}/llvm" \
    -DCMAKE_C_COMPILER=clang \
    -DCMAKE_CXX_COMPILER=clang++ \
-DLLVM_ENABLE_MODULES=ON\
  -DCMAKE_C_FLAGS="${FLAGS}" \
  -DCMAKE_CXX_FLAGS=" ${FLAGS} " \
  -DCMAKE_EXE_LINKER_FLAGS="${FLAGS}  " \
    -DCMAKE_SHARED_LINKER_FLAGS="  " \
    -DCMAKE_MODULE_LINKER_FLAGS=" " \
    -DCMAKE_STATIC_LINKER_FLAGS="  " \
    -DBUILD_SHARED_LIBS=OFF\
-DLLVM_BUILD_STATIC=ON\
-DLLVM_STATIC_LINK_CXX_STDLIB=ON\
-DLLVM_LINK_LLVM_DYLIB=OFF\
-DLLVM_BUILD_LLVM_DYLIB=OFF\
    -DLLVM_ENABLE_BACKTRACES=OFF \
    -DLLVM_ENABLE_PRETTY_STACK_TRACE=OFF \
    -DLLVM_ENABLE_CRASH_DUMPS=OFF \
    -DCLANG_ENABLE_MODULES=ON \
  -DCLANG_ENABLE_MODULES=ON \
    -DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
-DLLVM_ENABLE_ZLIB=OFF \
-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
-DLLVM_ENABLE_ZSTD=OFF \
-DLLVM_ENABLE_THREADS=ON \
-DLLVM_ENABLE_FFI=OFF \
-DLLVM_ENABLE_CRASH_DUMPS=OFF \
-DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
-DLLVM_ENABLE_UNWIND_TABLES=OFF \
-DLLVM_ENABLE_BACKTRACES=OFF \
-DBUILD_SHARED_LIBS=OFF \
-DLLVM_USE_FOLDERS=OFF \
-DLLVM_INSTALL_MODULEMAPS=OFF \
-DLLVM_INSTALL_UTILS=OFF \
-DLLVM_USE_SYMLINKS=OFF \
-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
-DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
-DLLVM_DEPENDENCY_DEBUGGING=OFF \
-DLLVM_CCACHE_BUILD=OFF \
-DLIBC_GPU_BUILD=OFF \
-DLLVM_ENABLE_LIBXML2=OFF \
-DLLVM_ENABLE_LIBEDIT=OFF \
-DLLVM_ENABLE_LIBPFM=OFF \
-DLLVM_ENABLE_CURL=OFF \
-DLLVM_ENABLE_PIC=ON \
-DLLVM_ENABLE_MODULES=ON \
-DLLVM_ENABLE_MODULE_DEBUGGING=OFF \
-DLLVM_ENABLE_LIBCXX=ON \
-DLLVM_ENABLE_LLVM_LIBC=ON \
-DLLVM_STATIC_LINK_CXX_STDLIB=ON \
-DLLVM_ENABLE_LLD=ON \
-DLLVM_ENABLE_ASSERTIONS=OFF \
-DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \
-DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF \
-DLLVM_USE_PERF=OFF \
-DLLVM_USE_OPROFILE=OFF \
-DLLVM_USE_SANITIZER=OFF \
-DLLVM_USE_SPLIT_DWARF=ON \
-DLLVM_INCLUDE_TOOLS=ON \
-DLLVM_INCLUDE_UTILS=ON \
-DLLVM_INCLUDE_RUNTIMES=ON \
-DLLVM_BUILD_RUNTIME=ON \
-DLLVM_BUILD_EXAMPLES=OFF \
-DLLVM_BUILD_TESTS=OFF \
-DLLVM_INSTALL_GTEST=OFF \
-DLLVM_BUILD_BENCHMARKS=OFF \
-DLLVM_INCLUDE_BENCHMARKS=OFF \
-DLLVM_INCLUDE_DOCS=OFF\
-DLLVM_ENABLE_OCAMLDOC=OFF \
-DLLVM_ENABLE_BINDINGS=OFF \
-DLLVM_ENABLE_TELEMETRY=OFF \
-DLLVM_BUILD_STATIC=ON \
-DLLVM_ENABLE_MODULES=ON\
-DCLANG_ENABLE_SHARED=OFF\
-DLLDB_ENABLE_SHARED=OFF\
  -DLLVM_ENABLE_PIC=ON \
  -DCMAKE_POSITION_INDEPENDENT_CODE=OFF \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="${SYSROOT_DIR}/usr" \
    -DLLVM_ENABLE_PROJECTS="clang;lld" \
    -DLLVM_ENABLE_RUNTIMES="libc;compiler-rt;libcxx;libcxxabi;libunwind" \
    -DLLVM_TARGETS_TO_BUILD="X86" \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_ENABLE_TERMINFO=OFF \
    -DLLVM_ENABLE_ZLIB=OFF \
    -DLLVM_ENABLE_PRETTY_STACK_TRACE=OFF\
-DLLVM_ENABLE_CRASH_DUMPS=OFF\
-DLLVM_ENABLE_CRASH_OVERRIDES=OFF\
    -DLLVM_ENABLE_LIBEDIT=OFF \
    -DLLVM_ENABLE_LIBXML2=OFF \
    -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
    -DLIBCXX_ENABLE_STATIC=ON \
    -DLIBCXX_ENABLE_SHARED=OFF \
    -DBUILD_SHARED_LIBS=OFF\
-DCLANG_ENABLE_SHARED=OFF\
-DLLVM_ENABLE_MODULES=ON \
    -DLLVM_TABLEGEN="${BUILD_DIR}/bin/llvm-tblgen" \
    -DLLVM_TABLEGEN_EXE="${BUILD_DIR}/bin/llvm-tblgen" \
    -DCLANG_TABLEGEN="${BUILD_DIR}/bin/clang-tblgen" \
    -DCLANG_TABLEGEN_EXE="${BUILD_DIR}/bin/clang-tblgen" \
    -DLLVM_ENABLE_TABLEGEN=OFF

ninja
ninja install

# Set up sysroot symlinks
ln -sf usr/lib "${SYSROOT_DIR}/lib64"
ln -sf usr/include "${SYSROOT_DIR}/include"

# Step 3: Build compiler-rt, libunwind, libc++, libcxxabi using the populated sysroot
echo "Building runtime libraries using our libc sysroot..."
RUNTIME_DIR="${BUILD_DIR}/runtime"
mkdir -p "${RUNTIME_DIR}"
cd "${RUNTIME_DIR}"

# Define sysroot compiler flags
SYSROOT_FLAGS="--sysroot=${SYSROOT_DIR}"
SYSROOT_CFLAGS=" -fno-modules -static -target x86_64-linux-musl -fno-pic -fno-pie  -stdlib=libc++ -unwind=libunwind -rtlib=compiler-rt -fuse-ld=lld ${SYSROOT_FLAGS}"
SYSROOT_CXXFLAGS=" -fno-modules -static  -target x86_64-linux-musl -fno-pic -fno-pie  -stdlib=libc++ -unwind=libunwind -rtlib=compiler-rt -fuse-ld=lld ${SYSROOT_FLAGS}"
SYSROOT_LINKFLAGS=" -fno-modules -static -target x86_64-linux-musl -fno-pic -fno-pie -stdlib=libc++ -unwind=libunwind -rtlib=compiler-rt -fuse-ld=lld ${SYSROOT_FLAGS}"

cmake -G Ninja "${LLVM_PROJECT_SRC}" \
    -DCMAKE_C_COMPILER="${INITIAL_DIR}/bin/clang" \
    -DCMAKE_CXX_COMPILER="${INITIAL_DIR}/bin/clang++" \
-DLLVM_ENABLE_MODULES=ON\
    -DCMAKE_C_FLAGS="${SYSROOT_CFLAGS}" \
    -DCMAKE_CXX_FLAGS="${SYSROOT_CXXFLAGS}" \
    -DCMAKE_EXE_LINKER_FLAGS="${SYSROOT_LINKFLAGS}" \
    -DCMAKE_SHARED_LINKER_FLAGS="${SYSROOT_LINKFLAGS}" \
-DLLVM_ENABLE_ZLIB=OFF \
-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
-DLLVM_ENABLE_ZSTD=OFF \
-DLLVM_ENABLE_THREADS=ON \
-DLLVM_ENABLE_FFI=OFF \
-DLLVM_ENABLE_CRASH_DUMPS=OFF \
-DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
-DLLVM_ENABLE_UNWIND_TABLES=OFF \
-DLLVM_ENABLE_BACKTRACES=OFF \
-DBUILD_SHARED_LIBS=OFF \
-DLLVM_USE_FOLDERS=OFF \
-DLLVM_INSTALL_MODULEMAPS=OFF \
-DLLVM_INSTALL_UTILS=OFF \
-DLLVM_USE_SYMLINKS=OFF \
-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
-DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
-DLLVM_DEPENDENCY_DEBUGGING=OFF \
-DLLVM_CCACHE_BUILD=OFF \
-DLIBC_GPU_BUILD=OFF \
-DLLVM_ENABLE_LIBXML2=OFF \
-DLLVM_ENABLE_LIBEDIT=OFF \
-DLLVM_ENABLE_LIBPFM=OFF \
-DLLVM_ENABLE_CURL=OFF \
-DLLVM_ENABLE_PIC=ON \
-DLLVM_ENABLE_MODULES=ON \
-DLLVM_ENABLE_MODULE_DEBUGGING=OFF \
-DLLVM_ENABLE_LIBCXX=ON \
-DLLVM_ENABLE_LLVM_LIBC=ON \
-DLLVM_STATIC_LINK_CXX_STDLIB=ON \
-DLLVM_ENABLE_LLD=ON \
-DLLVM_ENABLE_ASSERTIONS=OFF \
-DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \
-DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF \
-DLLVM_USE_PERF=OFF \
-DLLVM_USE_OPROFILE=OFF \
-DLLVM_USE_SANITIZER=OFF \
-DLLVM_USE_SPLIT_DWARF=ON \
-DLLVM_INCLUDE_TOOLS=ON \
-DLLVM_INCLUDE_UTILS=ON \
-DLLVM_INCLUDE_RUNTIMES=ON \
-DLLVM_BUILD_RUNTIME=ON \
-DLLVM_BUILD_EXAMPLES=OFF \
-DLLVM_BUILD_TESTS=OFF \
-DLLVM_INSTALL_GTEST=OFF \
-DLLVM_BUILD_BENCHMARKS=OFF \
-DLLVM_INCLUDE_BENCHMARKS=OFF \
-DLLVM_INCLUDE_DOCS=OFF\
-DLLVM_ENABLE_OCAMLDOC=OFF \
-DLLVM_ENABLE_BINDINGS=OFF \
-DLLVM_ENABLE_TELEMETRY=OFF \
-DLLVM_BUILD_STATIC=ON \
    -DCLANG_ENABLE_MODULES=ON \
        -DLLVM_ENABLE_BACKTRACES=OFF \
    -DLLVM_ENABLE_PRETTY_STACK_TRACE=OFF \
    -DLLVM_ENABLE_CRASH_DUMPS=OFF \
    -DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
  -DCLANG_ENABLE_MODULES=ON \
  -DLLVM_ENABLE_PIC=ON \
  -DCMAKE_POSITION_INDEPENDENT_CODE=OFF \
    -DCMAKE_MODULE_LINKER_FLAGS="${SYSROOT_LINKFLAGS}" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="${SYSROOT_DIR}/usr" \
    -DLLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;libcxxabi;libunwind" \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_ENABLE_TERMINFO=OFF \
    -DBUILD_SHARED_LIBS=OFF\
-DLLVM_BUILD_STATIC=ON\
-DLLVM_STATIC_LINK_CXX_STDLIB=ON\
-DLLVM_LINK_LLVM_DYLIB=OFF\
-DLLVM_BUILD_LLVM_DYLIB=OFF\
-DLLVM_ENABLE_MODULES=ON\
    -DLLVM_ENABLE_PRETTY_STACK_TRACE=OFF\
-DLLVM_ENABLE_CRASH_DUMPS=OFF\
-DLLVM_ENABLE_CRASH_OVERRIDES=OFF\
-DCLANG_ENABLE_SHARED=OFF\
    -DBUILD_SHARED_LIBS=OFF\
-DLLDB_ENABLE_SHARED=OFF\
    \
    -DCOMPILER_RT_BUILD_BUILTINS=ON \
    -DCOMPILER_RT_BUILD_SANITIZERS=ON \
    -DCOMPILER_RT_BUILD_XRAY=ON \
    -DCOMPILER_RT_BUILD_LIBFUZZER=ON \
    -DCOMPILER_RT_BUILD_PROFILE=ON \
    -DCOMPILER_RT_BUILD_MEMPROF=ON \
    -DCOMPILER_RT_BUILD_ORC=ON \
    -DCOMPILER_RT_BUILD_STATIC_RUNTIME=ON \
    -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON \
    -DCOMPILER_RT_USE_BUILTINS_LIBRARY=ON \
    -DCOMPILER_RT_INCLUDE_TESTS=OFF \
    -DCOMPILER_RT_CXX_LIBRARY="libcxx" \
    -DCOMPILER_RT_DEFAULT_TARGET_ARCH="x86_64" \
    -DCOMPILER_RT_OS_DIR="linux" \
    \
    -DLIBCXX_HAS_MUSL_LIBC=ON \
    -DLIBCXX_ENABLE_SHARED=OFF \
    -DLIBCXX_ENABLE_STATIC=ON \
    -DLIBCXX_ENABLE_STATIC_ABI_LIBRARY=ON \
    -DLIBCXX_CXX_ABI=libcxxabi \
    -DLIBCXX_USE_COMPILER_RT=ON \
    -DLIBCXX_ENABLE_EXCEPTIONS=ON \
    -DLIBCXX_ENABLE_RTTI=ON \
    -DLIBCXX_ENABLE_THREADS=ON \
    -DLIBCXX_INCLUDE_TESTS=OFF \
    \
    -DLIBCXXABI_ENABLE_SHARED=OFF \
    -DLIBCXXABI_ENABLE_STATIC=ON \
    -DLIBCXXABI_USE_LLVM_UNWINDER=ON \
    -DLIBCXXABI_USE_COMPILER_RT=ON \
    -DLIBCXXABI_ENABLE_EXCEPTIONS=ON \
    -DLIBCXXABI_ENABLE_THREADS=ON \
    -DLIBCXXABI_INCLUDE_TESTS=OFF \
    \
    -DLIBUNWIND_ENABLE_SHARED=OFF \
    -DLIBUNWIND_ENABLE_STATIC=ON \
    -DLIBUNWIND_USE_COMPILER_RT=ON \
    -DLIBUNWIND_INSTALL_LIBRARY=ON \
    -DLLVM_ENABLE_MODULES=ON \
    -DLIBUNWIND_INCLUDE_TESTS=OFF \
    \
    -DLLVM_TABLEGEN="${BUILD_DIR}/bin/llvm-tblgen" \
    -DLLVM_TABLEGEN_EXE="${BUILD_DIR}/bin/llvm-tblgen" \
    -DLLVM_ENABLE_TABLEGEN=OFF

ninja
ninja install

# Step 4: Build final toolchain with all components
echo "Building final combined toolchain with all components..."
FINAL_BUILD_DIR="${BUILD_DIR}/final"
mkdir -p "${FINAL_BUILD_DIR}"
cd "${FINAL_BUILD_DIR}"

# Now build the complete toolchain with LTO and all components
cmake -G Ninja "${LLVM_PROJECT_SRC}/llvm" \
    -DCMAKE_C_COMPILER="${INITIAL_DIR}/bin/clang" \
    -DCMAKE_CXX_COMPILER="${INITIAL_DIR}/bin/clang++" \
    -DCMAKE_C_FLAGS="${SYSROOT_CFLAGS}" \
    -DCMAKE_CXX_FLAGS="${SYSROOT_CXXFLAGS}" \
    -DCMAKE_EXE_LINKER_FLAGS="${SYSROOT_LINKFLAGS}" \
    -DCMAKE_SHARED_LINKER_FLAGS="${SYSROOT_LINKFLAGS}" \
    -DCMAKE_MODULE_LINKER_FLAGS="${SYSROOT_LINKFLAGS}" \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX="${FINAL_DIR}" \
    -DCLANG_ENABLE_MODULES=ON \
    \
    -DBUILD_SHARED_LIBS=OFF \
    -DLLVM_BUILD_STATIC=ON \
    -DLLVM_STATIC_LINK_CXX_STDLIB=ON \
  -DLLVM_ENABLE_PIC=ON \
  -DCMAKE_POSITION_INDEPENDENT_CODE=OFF \
    -DLLVM_LINK_LLVM_DYLIB=OFF \
    -DLLVM_BUILD_LLVM_DYLIB=OFF \
    \
    -DLLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;polly;lldb;openmp" \
    -DLLVM_ENABLE_RUNTIMES="compiler-rt;libcxx;libcxxabi;libunwind" \
    -DLLVM_TARGETS_TO_BUILD="X86" \
    -DLLVM_TARGET_ARCH="x86_64" \
    -DLLVM_DEFAULT_TARGET_TRIPLE="${TARGET_TRIPLE}" \
    \
    -DLLVM_ENABLE_LTO=Thin \
    -DLLVM_ENABLE_LLD=ON \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_ENABLE_EH=ON \
  -DCLANG_ENABLE_MODULES=ON \
        -DLLVM_ENABLE_BACKTRACES=OFF \
    -DLLVM_ENABLE_PRETTY_STACK_TRACE=OFF \
-DLLVM_ENABLE_ZLIB=OFF \
-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
-DLLVM_ENABLE_ZSTD=OFF \
-DLLVM_ENABLE_THREADS=ON \
-DLLVM_ENABLE_FFI=OFF \
-DLLVM_ENABLE_CRASH_DUMPS=OFF \
-DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
-DLLVM_ENABLE_UNWIND_TABLES=OFF \
-DLLVM_ENABLE_BACKTRACES=OFF \
-DBUILD_SHARED_LIBS=OFF \
-DLLVM_USE_FOLDERS=OFF \
-DLLVM_INSTALL_MODULEMAPS=OFF \
-DLLVM_INSTALL_UTILS=OFF \
-DLLVM_USE_SYMLINKS=OFF \
-DLLVM_INSTALL_CCTOOLS_SYMLINKS=ON \
-DLLVM_INSTALL_BINUTILS_SYMLINKS=ON \
-DLLVM_DEPENDENCY_DEBUGGING=OFF \
-DLLVM_CCACHE_BUILD=OFF \
-DLIBC_GPU_BUILD=OFF \
-DLLVM_ENABLE_LIBXML2=OFF \
-DLLVM_ENABLE_LIBEDIT=OFF \
-DLLVM_ENABLE_LIBPFM=OFF \
-DLLVM_ENABLE_CURL=OFF \
-DLLVM_ENABLE_PIC=ON \
-DLLVM_ENABLE_MODULES=ON \
-DLLVM_ENABLE_MODULE_DEBUGGING=OFF \
-DLLVM_ENABLE_LIBCXX=ON \
-DLLVM_ENABLE_LLVM_LIBC=ON \
-DLLVM_STATIC_LINK_CXX_STDLIB=ON \
-DLLVM_ENABLE_LLD=ON \
-DLLVM_ENABLE_ASSERTIONS=OFF \
-DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \
-DLLVM_ABI_BREAKING_CHECKS=FORCE_OFF \
-DLLVM_USE_PERF=OFF \
-DLLVM_USE_OPROFILE=OFF \
-DLLVM_USE_SANITIZER=OFF \
-DLLVM_USE_SPLIT_DWARF=ON \
-DLLVM_INCLUDE_TOOLS=ON \
-DLLVM_INCLUDE_UTILS=ON \
-DLLVM_INCLUDE_RUNTIMES=ON \
-DLLVM_BUILD_RUNTIME=ON \
-DLLVM_BUILD_EXAMPLES=OFF \
-DLLVM_BUILD_TESTS=OFF \
-DLLVM_INSTALL_GTEST=OFF \
-DLLVM_BUILD_BENCHMARKS=OFF \
-DLLVM_INCLUDE_BENCHMARKS=OFF \
-DLLVM_INCLUDE_DOCS=OFF\
-DLLVM_ENABLE_OCAMLDOC=OFF \
-DLLVM_ENABLE_BINDINGS=OFF \
-DLLVM_ENABLE_TELEMETRY=OFF \
-DLLVM_BUILD_STATIC=ON \
    -DLLVM_ENABLE_CRASH_DUMPS=OFF \
    -DLLVM_ENABLE_CRASH_OVERRIDES=OFF \
    \
    -DCLANG_DEFAULT_PIE_ON_LINUX=OFF \
    -DCLANG_DEFAULT_CRT_STATIC=ON \
    -DCLANG_DEFAULT_LINKER=lld \
    -DCLANG_DEFAULT_RTLIB=compiler-rt \
    -DCLANG_DEFAULT_UNWINDLIB=libunwind \
    -DCLANG_DEFAULT_OBJCOPY=llvm-objcopy \
    -DCLANG_DEFAULT_OPENMP_RUNTIME=libomp \
    -DDEFAULT_SYSROOT="${FINAL_DIR}/sysroot" \
    -DCLANG_ENABLE_BOOTSTRAP=OFF \
    -DCLANG_PLUGIN_SUPPORT=ON \
    -DCLANG_ENABLE_ARCMT=ON \
    -DCLANG_ENABLE_STATIC_ANALYZER=ON \
    \
    -DLLVM_ENABLE_TERMINFO=OFF \
    -DLLVM_ENABLE_ZLIB=FORCE_STATIC \
    -DLLVM_ENABLE_ZSTD=FORCE_STATIC \
    -DLLVM_ENABLE_LIBXML2=FORCE_STATIC \
    -DLLVM_ENABLE_LIBEDIT=OFF \
    -DLLVM_ENABLE_LIBPFM=OFF \
    -DLLVM_ENABLE_CURL=OFF \
    -DLLVM_ENABLE_WARNINGS=OFF \
    -DLLVM_ENABLE_BINDINGS=OFF \
    -DLLVM_UNREACHABLE_OPTIMIZE=ON \
    -DLLVM_USE_LINKER=lld \
    -DLLVM_USE_RELATIVE_PATHS_IN_FILES=ON \
    -DLLVM_USE_RELATIVE_PATHS_IN_DEBUG_INFO=ON \
    -DLLVM_ENABLE_THREADS=ON \
    -DLLVM_ENABLE_UNWIND_TABLES=OFF \
    -DLLVM_HERMETIC_STATIC_LIBRARY=ON \
    \
    -DLLVM_OPTIMIZED_TABLEGEN=ON \
    -DLLVM_ENABLE_ASSERTIONS=OFF \
    -DLLVM_ENABLE_EXPENSIVE_CHECKS=OFF \
    -DLLVM_ENABLE_BACKTRACES=OFF \
    -DLLVM_INCLUDE_TESTS=OFF \
    -DLLVM_INCLUDE_EXAMPLES=OFF \
    -DLLVM_INCLUDE_BENCHMARKS=OFF \
    -DLLVM_INCLUDE_DOCS=OFF \
    -DLLVM_BUILD_EXAMPLES=OFF \
    -DLLVM_BUILD_BENCHMARKS=OFF \
    -DLLVM_BUILD_TESTS=OFF \
    -DLLVM_ENABLE_DOXYGEN=OFF \
    -DLLVM_ENABLE_SPHINX=OFF \
    -DLLVM_ENABLE_OCAMLDOC=OFF \
    -DLLVM_APPEND_VC_REV=OFF \
    \
    -DCMAKE_SYSTEM_NAME="Linux" \
    -DLLVM_TABLEGEN="${BUILD_DIR}/bin/llvm-tblgen" \
    -DLLVM_TABLEGEN_EXE="${BUILD_DIR}/bin/llvm-tblgen" \
    -DCLANG_TABLEGEN="${BUILD_DIR}/bin/clang-tblgen" \
    -DCLANG_TABLEGEN_EXE="${BUILD_DIR}/bin/clang-tblgen" \
    -DLLVM_ENABLE_TABLEGEN=OFF \
    -DLLVM_PARALLEL_COMPILE_JOBS=${JOBS} \
    -DLLVM_ENABLE_MODULES=ON \
    -DLLVM_PARALLEL_LINK_JOBS=${JOBS}

ninja
ninja install

# Install sysroot from our initial build
echo "Installing sysroot to final toolchain..."
cp -a "${SYSROOT_DIR}"/* "${FINAL_DIR}/sysroot/"

# Create a complete clang resource directory in the sysroot
mkdir -p "${FINAL_DIR}/sysroot/usr/lib/clang"
cd "${FINAL_BUILD_DIR}"
RESOURCE_DIR=$(bin/clang -print-resource-dir)
cp -a "${RESOURCE_DIR}" "${FINAL_DIR}/sysroot/usr/lib/clang/"

# Create wrapper scripts for clang to enforce hermetic build environment
cat > "${FINAL_DIR}/bin/${TARGET_TRIPLE}-clang" << EOF
#!/bin/bash
exec "${FINAL_DIR}/bin/clang" --sysroot="${FINAL_DIR}/sysroot" -static "\$@"
EOF

cat > "${FINAL_DIR}/bin/${TARGET_TRIPLE}-clang++" << EOF
#!/bin/bash
exec "${FINAL_DIR}/bin/clang++" --sysroot="${FINAL_DIR}/sysroot" -static "\$@"
EOF

chmod +x "${FINAL_DIR}/bin/${TARGET_TRIPLE}-clang"
chmod +x "${FINAL_DIR}/bin/${TARGET_TRIPLE}-clang++"

# Create symlinks for all standard GNU binutils tools
for tool in ar as nm objcopy objdump ranlib readelf size strings strip; do
  ln -sf "llvm-${tool}" "${FINAL_DIR}/bin/${TARGET_TRIPLE}-${tool}"
done

# Create a pkg-config that's configured for the sysroot
cat > "${FINAL_DIR}/bin/${TARGET_TRIPLE}-pkg-config" << EOF
#!/bin/bash
export PKG_CONFIG_PATH="${FINAL_DIR}/sysroot/usr/lib/pkgconfig:${FINAL_DIR}/sysroot/usr/share/pkgconfig"
export PKG_CONFIG_LIBDIR="${FINAL_DIR}/sysroot/usr/lib/pkgconfig:${FINAL_DIR}/sysroot/usr/share/pkgconfig"
export PKG_CONFIG_SYSROOT_DIR="${FINAL_DIR}/sysroot"
exec pkg-config "\$@"
EOF
chmod +x "${FINAL_DIR}/bin/${TARGET_TRIPLE}-pkg-config"

# Set up config files for helping with static linking
mkdir -p "${FINAL_DIR}/sysroot/usr/lib/pkgconfig"
for lib in libunwind libcxx libcxxabi compiler-rt; do
  cat > "${FINAL_DIR}/sysroot/usr/lib/pkgconfig/${lib}.pc" << EOF
Name: ${lib}
Description: ${lib} library for static linking
Version: 1.0.0
Libs: -l${lib#lib}
EOF
done

# Fix permissions
chmod -R a+r "${FINAL_DIR}/sysroot"
find "${FINAL_DIR}/sysroot" -type d -exec chmod a+x {} \;

echo "Build complete! Toolchain is installed at: ${FINAL_DIR}"
echo "To use this toolchain, add ${FINAL_DIR}/bin to your PATH"
echo "For cross-compilation, use the ${TARGET_TRIPLE}-* prefixed tools"